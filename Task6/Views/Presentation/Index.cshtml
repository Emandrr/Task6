@model IEnumerable<Task6.Models.Slide>
@{
    ViewData["Title"] = "Презентация";
    Layout = null; // Убираем layout для полноэкранного режима
}


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: #f5f5f5;
        color: #333;
        overflow: hidden;
        height: 100vh;
    }

    .presentation-container {
        position: relative;
        width: 100vw;
        height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .slide-container {
        flex: 1;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 30px;
    }

    .slide {
        position: relative;
        width: 100%;
        height: 100%;
        background: white;
        border-radius: 8px;
        border: 1px solid #ddd;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        display: none;
    }

        .slide.active {
            display: block;
        }

    .text-element {
        position: absolute;
        color: #333;
        text-shadow: none;
        user-select: none;
    }

    .controls {
        position: fixed;
        bottom: 30px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 20px;
        z-index: 1000;
    }

    .btn {
        padding: 10px 20px;
        background: white;
        border: 1px solid #ccc;
        border-radius: 6px;
        color: #333;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

            .btn:disabled:hover {
                transform: none;
                background: rgba(255, 255, 255, 0.2);
            }

        .btn.exit-btn {
            background: rgba(220, 53, 69, 0.3);
            border-color: rgba(220, 53, 69, 0.5);
        }

            .btn.exit-btn:hover {
                background: rgba(220, 53, 69, 0.5);
            }

    .slide-counter {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        color: #333;
        padding: 8px 16px;
        border-radius: 6px;
        border: 1px solid #ddd;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 14px;
        font-weight: 500;
    }

    .error {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        font-size: 18px;
        color: #ff6b6b;
    }

    .slide-title {
        position: absolute;
        top: 20px;
        left: 20px;
        font-size: 20px;
        font-weight: bold;
        color: #333;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>


<div class="presentation-container">
    @if (Model == null || !Model.Any())
    {
        <div class="error">
            Презентация не содержит слайдов
        </div>
    }
    else
    {
        <div class="slide-counter">
            <span id="slideCounter">1 / @Model.Count()</span>
        </div>

        <div class="slide-container">
            @{
                var slideIndex = 0;
            }
            @foreach (var slide in Model)
            {
                <div class="slide @(slideIndex == 0 ? "active" : "")" data-slide-index="@slideIndex">
                    <div class="slide-title">@slide.Title</div>
                    @foreach (var textElement in slide.TextElements)
                    {
                        <div class="text-element"
                             data-markdown="@textElement.Text"
                             style="font-size: @(textElement.FontSize)px; left: @(textElement.PositionX)px; top: @(textElement.PositionY)px;">
                        </div>
                    }
                </div>
                slideIndex++;
            }
        </div>

        <div class="controls">
            <button class="btn" id="prevBtn" onclick="previousSlide()">&larr; Back</button>
            <button class="btn" id="nextBtn" onclick="nextSlide()">Forward &rarr;</button>
            <button class="btn exit-btn" onclick="exitPresentation()">Leave</button>
        </div>
    }
</div>

<script>
    let currentSlideIndex = 0;
    const totalSlides = @Model.Count();


    function renderMarkdown() {
        const markdownElements = document.querySelectorAll('.text-element[data-markdown]');
        markdownElements.forEach(el => {
            const markdownText = el.getAttribute('data-markdown');
            el.innerHTML = marked.parse(markdownText);
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        if (totalSlides > 0) {
            renderMarkdown();
            updateControls();

            document.addEventListener('keydown', function(event) {
                switch(event.key) {
                    case 'ArrowRight':
                    case ' ':
                        nextSlide();
                        event.preventDefault();
                        break;
                    case 'ArrowLeft':
                        previousSlide();
                        event.preventDefault();
                        break;
                    case 'Escape':
                        exitPresentation();
                        event.preventDefault();
                        break;
                }
            });
        }
    });

    function showSlide(index) {
        if (index < 0 || index >= totalSlides) return;

        const allSlides = document.querySelectorAll('.slide');
        allSlides.forEach(slide => slide.classList.remove('active'));

        const targetSlide = document.querySelector(`[data-slide-index="${index}"]`);
        if (targetSlide) {
            targetSlide.classList.add('active');
        }

        currentSlideIndex = index;
        document.getElementById('slideCounter').textContent =
            `${currentSlideIndex + 1} / ${totalSlides}`;
    }

    function nextSlide() {
        if (currentSlideIndex < totalSlides - 1) {
            showSlide(currentSlideIndex + 1);
            updateControls();
        }
    }

    function previousSlide() {
        if (currentSlideIndex > 0) {
            showSlide(currentSlideIndex - 1);
            updateControls();
        }
    }

    function updateControls() {
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');

        if (prevBtn) prevBtn.disabled = currentSlideIndex === 0;
        if (nextBtn) nextBtn.disabled = currentSlideIndex === totalSlides - 1;
    }

    function exitPresentation() {
            const url = window.location.href;
            const id = url.split('/').pop();
            window.location.href = '/Edit/Index/' + id;
    }
</script>
